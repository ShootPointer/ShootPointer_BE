
services:
  # PostgreSQL
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_DB: shootpointer
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: rlaehdus00
      TZ: Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - spring-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d shootpointer"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"  # 포트 통일
    volumes:
      - redis-data:/data
    networks:
      - spring-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  #pgadmin     
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "3305:80"
    networks:
      - spring-network
    restart: always

  # MongoDB
  mongo:
    image: mongo:8
    container_name: mongo
    environment:
      MONGO_INITDB_DATABASE: shootpointer
    ports:
      - "27017:27017"  # 포트 통일
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - spring-network
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Spring Boot Application
  shootpointer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shootpointer
    command: ["java", "-Xmx2g", "-jar", "/app.jar"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}

      # 서버 포트
      SERVER_PORT: 9000
      
      # 데이터베이스 - 연결 문자열 단순화
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shootpointer
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: rlaehdus00
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      
      # JPA 설정
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: true
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
      
      # 연결 풀 설정 추가
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 600000
      SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1800000
      
      # Redis
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      
      # MongoDB
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/shootpointer
      
      # 타임존 설정
      TZ: Asia/Seoul
      
      # 로깅 레벨 조정
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: DEBUG
      LOGGING_LEVEL_ORG_HIBERNATE_TYPE_DESCRIPTOR_SQL_BASICBINDER: TRACE

      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
    ports:
      - "9000:9000"
    networks:
      - spring-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ## ElasticSearch
  elasticsearch:
    build:
      context: .
      dockerfile: Dockerfile.elesticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - logger.level=debug
      - ES_JAVA_OPTS=-Xms2g -Xmx2g -Xlog:disable
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./esdata:/usr/share/elasticsearch/data
      - ./es-logs:/usr/share/elasticsearch/logs
    networks:
      - spring-network
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kibana:
      image: docker.elastic.co/kibana/kibana:8.6.0
      container_name: kibana
      environment:
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      ports:
        - "5601:5601"
      depends_on:
        - elasticsearch
      networks:
        - spring-network
      restart: always


networks:
  spring-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  mongo-data:
  mongo-config:
  esdata:
